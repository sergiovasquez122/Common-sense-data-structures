1. Following is the “Word Builder” algorithm we encountered in Word Builder,
on page 97. Describe its space complexity in terms of Big O:
function wordBuilder(array) {
let collection = [];
for(let i = 0; i < array.length; i++) {
for(let j = 0; j < array.length; j++) {
if (i !== j) {
collection.push(array[i] + array[j]);
}
}
}
return collection;
}

the algorithm is O(N**2)

2. Following is a function that reverses an array. Describe its space complex-
ity in terms of Big O:
function reverse(array) {
let newArray = [];
for (let i = array.length - 1; i >= 0; i--) {
newArray.push(array[i]);
}
return newArray;
}

the algorithm is O(N)

3.reate a new function to reverse an array that takes up just O(1) extra space.

function reversea(array){
	let i = 0;
	let j = array.length - 1;
	while(i < j){
		let temp = array[i];
		array[i] = array[j];
		array[j] = temp;
		i++;
		j--;
	}
}


4. Following are three different implementations of a function that accepts an
array of numbers and returns an array containing those numbers multiplied
by 2. For example, if the input is [5, 4, 3, 2, 1] , the output will be [10, 8, 6, 4, 2] .
function doubleArray1(array) {
let newArray = [];
for(let i = 0; i < array.length; i++) {
newArray.push(array[i] * 2);
}
return newArray;
}
function doubleArray2(array) {
for(let i = 0; i < array.length; i++) {
array[i] *= 2;
}
return array;
}
function doubleArray3(array, index=0) {
if (index >= array.length) { return; }
array[index] *= 2;
doubleArray3(array, index + 1);
return array;
}

Fill in the table that follows to describe the efficiency of these three versions in terms of both time and space:

version 1 time complexity O(N) space complexity O(N)

version 2 time complexity O(N) space complexity O(1)

version 3 time complexity O(N) space complexity O(N)
