1. Use Big O notation to describe the time complexity of an algorithm that takes 4 * N + 16 steps

The algorithm is O(N)

2. Use Big O notation to describe the time complexity of an algorithm that takes 2 * N ** 2

The algorithm is O(N**2)

3. Use Big O notation to describe the time complexity of the following function, which returns the sum of all numbers of an array after the numbers have been doubled:

def double_then_sum(array)
	double_array = []
	
	array.each do |number |
		doubled_array << number *= 2
	end

	sum = 0

	double_array.each do |number |
		sum += number
	end

	return sum
end

the algorithm is O(N)

4. Use Big O notation to describe the time complexity of the following function. Which accepts an array of strings and prints each string in mulitple cases:

def multiple_cases(array)
	array.each do |string|
		puts string.upcase
		puts string.downcase
		puts string.capitalize
	end
end	

The algorithms is O(N)

5. The next function iterates over an array of numbers, and for each number whose index is even, it prints the sum of that number plus every number in the array. What is the function's efficiency in terms of Big O notation?

def every_other(array)
	array.each_with_index do |number, index|
		if index.even?
			array.each do |other_number|
				puts number + other_number
			end
		end
	end
end

The algorithm is O(N**2)

